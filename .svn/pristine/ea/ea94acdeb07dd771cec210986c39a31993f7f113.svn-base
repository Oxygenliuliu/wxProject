<template>
	<view class="con-conent">
		<view class="tip">
			<text class="text-tip"><text class='imp'>付款须知: </text>您正在使用微信小程序便捷付款，请确认订单是否为您本人订单。</text>
		</view>
		<view class="not-data" v-show="tipShow">没有需要支付的订单</view>
		<view class="dailycashlist">
			<scroll-view  scroll-y="true" :style="{ 'height':scrollHeight }" scroll-with-animation="true">
				<view class="daily-list1" v-for="(it,index) in dailyList" :key="index">
					<view class="daily-head" style="padding: 20rpx 0;">
						<view class="flex-box">
							<view class="is-true" :style="tabIndex == 2?'':'display: none;'">
								<label @tap='changeCheckStatu(it.BILL_CODE)'>
									<checkbox :checked="it.isTrue" ></checkbox>
								</label>
							</view>
							<view class="title-box">
								<view class="daily-time">开单日期: {{it.BILL_DATE_STR}}</view>
								<view class="daily-time">单号: {{it.BILL_CODE}}</view>
								<view class="daily-time warning">
									<text style="color: #4cd964;">已结金额: {{it.BILL_PAIDMONEY|priceFormat(2,'￥',true)}}</text>
								</view>
								<view class="daily-time warning" style="padding-bottom: 20rpx;">
									<text v-show="it.BILL_LEFTMONEY > 0">未结金额: {{it.BILL_LEFTMONEY|priceFormat(2,'￥',true)}}</text>
									<text v-show="it.BILL_LEFTMONEY == 0" style="color: #4cd964;">未结金额: {{it.BILL_LEFTMONEY|priceFormat(2,'￥',true)}}</text>
								</view>
							</view>
						</view>
						<view class="chekc-btn">
							<view class="daily-status">
								<view>
									<span class='text over' v-show='it.BILL_STATUS == 0'>待登账</span>
									<span class='text over' v-show='it.BILL_STATUS == 1'>已登账</span>
									<span class='text warning' v-show='it.BILL_STATUS == 2'>已红冲</span>
								</view>
								<view class="form-where">
									<view class="tag" v-show="it.BILL_PLATFORM==0"><span class='iconfont iconpc'></span></view>
									<view class="tag"  v-show="it.BILL_PLATFORM==1"><span class='iconfont iconapp'></span></view>
									<view class="tag"  v-show="it.BILL_PLATFORM==2"><span class='iconfont iconshouji'></span></view>
								</view>
								<view class="display-more" @tap='displayMore(it.BILL_ID)'>
									<view class="tag" :class="{'icondown':!it.isShow}"><span class='iconfont icontop'></span></view>
								</view>
							</view>
						</view>
					</view>
					<view class="daily-conent" v-if="it.isShow"><!-- 明细详情 -->
						<view class="daily-list" v-for="(item,index1) in it.child" :key="index1">
							<view class="daily-listinfo">
								<view class="daily-img" @tap.stop="previewImage(it.child,index1)">
									<image :src="item.img" @error="defaultImg(index,index1)" alt=""></image>
								</view>
								<view class="daily-coninfo">
									<view class="daily-coninfoone">
										<view class="daily-conleft w-text-over">材料：{{item.BILLDETAIL_GOODSNAME||'空'}}</view> <view class="daily-listprice w-text-over">{{item.BILLDETAIL_PRICE|priceFormat(2,'￥',true)}}</view>
									</view>
									<view class="daily-coninfoone">
										<view class="daily-conleft">尺寸：{{item.BILLDETAIL_W||0}}*{{item.BILLDETAIL_H||0}}</view> <view class="daily-conright">数量：{{item.BILLDETAIL_TOTALQTY||0}}</view>
									</view>
									<view class="daily-coninfoone">
										<view class="daily-contacts w-text-over warning">明细总价: {{item.BILLDETAIL_TOTALMONEY|priceFormat(2,'￥',true)}}</view>
									</view>
								</view>
							</view>
						</view>
					</view>
				</view>
			</scroll-view>
		</view>
		<view class="recfooter">
			<view class="pricebtn">
				<view class="left1">
					<view class="pay-cont"><text>数量: {{num}}</text><text>总金额: <text class='warning'>{{sales|priceFormat(2,'￥',true)}}</text></text></view>
				</view>
				<view class="right1">
					<text class="right w-btn-info" @tap="canle()">返 回</text>
					<text class="right w-btn-danger" @tap="pay()">付 款</text>
				</view>
			</view>
		</view>
	</view>
</template>

<script>
	import l_md5 from '@/common/js/md5.js'
	import judge from '@/common/js/loginPublic.js'
	export default {
		components: {
		},
		data() {
			return {
				params:{},
				scrollHeight:'',//滚动条高度
				dailyList:[],//页面订单显示数组
				zMask: false,//查询时的遮罩层
				temporaryData: {order_id: '',order_code: ""},//收款单临时数据
				isPay: false,//是否完成支付
				tipShow: false,
				optionsDataA: {},
				paymoney: '0',//微信支付金额
			}
		},
		onLoad(options) {
			//{"dbname":"演示账套","url":"https://cloud.fydlsoft.com","userName":"18382416365","userPassword":"666666","personId":"1757112"}
			//let data11={type: 3,params:{BILL_ID: "1757034",PartnerId: '1757112',dbname: '演示账套',url: 'https://cloud.fydlsoft.com'}}
			//console.log(JSON.stringify(data11))
			//data={type: 3,params:{QUERY_ID: 2,MODE: 0,BILL_ID: "1757034"}}
			uni.getSystemInfo({
				success:(res)=>{
					/* 设置当前滚动容器的高，若非窗口的高度，请自行修改 */
					// #ifdef H5
					this.scrollHeight = res.windowHeight - 50 - 70 - 31 - res.statusBarHeight + 'px';
					// #endif
					// #ifndef H5
					this.scrollHeight = res.windowHeight - 50 - 40 - 31 + 'px';
					// #endif
				}
			});
			let token = uni.getStorageSync('token');
			this.optionsDataA = options;
			if(token){
				this.loginThenJquery();
			}else{
				if(options.q != undefined){
					let obj = {};
					let q = decodeURIComponent(options.q);
					//完整二维码
					let index = q.indexOf('=');
					let str = decodeURIComponent(q.substr(index + 1,q.length));
					obj = JSON.parse(str);
					this.$store.commit('setParams',options);
					this.setNetInfo(obj)
				}
				else if(options.q == undefined){
					this.$store.commit('setParams',options);
					this.setNetInfo(JSON.parse(options.data))
				}
				uni.navigateTo({
					url: '../../pages/index/login'
				})
			}
		},
		methods: {
			previewImage(item,index){
				let urls = [];
				item.forEach(i=>{
					urls.push(i.img);
				})
				console.log(urls,index,66)
				uni.previewImage({
					urls:urls,
					current:index,
					indicator:'number',
				})
			},
			defaultImg(index1,index){ //切换默认图片
				this.dailyList.some((i,j)=>{
					let flag = false;
					if(j == index1){
						flag = i.child.some((k,l)=>{
							if(l == index){
								k.img = 'http://122.114.123.189/l_img/unExist.png';
								return true;
							}
						})
						return flag
					}
				})
			},
			setNetInfo(data){ //分享进来预先设置dbname和url
				let obj = {
					dbname: data.params.dbname || '',
					url: data.params.url || '',
					port: data.params.port || 7798
				}
				this.$store.commit('changeDbname',obj.dbname);
				this.$store.commit('changePort',obj.port);
				this.$store.commit('changeUrl',obj.url);
			},
			loginThenJquery(){ //登录之后在执行查询
				let options = {}
				if(Object.keys(this.optionsDataA).length != 0){
					options = this.optionsDataA;
				}else{
					options = this.optionsData;
				}
				let obj = {};
				if(options.q != undefined){ //扫码进来
					let q = decodeURIComponent(options.q);
					//完整二维码
					let index = q.indexOf('=');
					let str = decodeURIComponent(q.substr(index + 1,q.length));
					obj = JSON.parse(str);
					if(typeof obj == 'object'){
						let parsonId = JSON.parse(uni.getStorageSync('userInfo')).personId || -1;
						if(obj.params.PartnerId == parsonId){
								this.someInit(obj);//初始化
								this.queryData();
						}else{
							uni.showToast({title: '不是您的专属分享链接',icon: 'none'})
						}
					}else{
						uni.showToast({title: '参数错误',icon: 'none'})
					}
				}else if(options!=undefined){ //分享进来
					//182804226769719296
					//obj = {type: 3,params:{QUERY_ID: 2,MODE: 0,BILL_ID: "182804226769719296",PartnerId: '1757112'}};
					obj = JSON.parse(options.data);//锚点
					let parsonId = JSON.parse(uni.getStorageSync('userInfo')).personId || -1;//本地存储客户ID
					let shareParsonId = obj.params.PartnerId || '';//分享传入客户ID
					if(parsonId != shareParsonId){
						uni.showToast({title: '不是您的专属分享链接',icon: 'none'})
					}else{
						this.someInit(obj);//初始化
						this.queryData();
					}
				}else{
					uni.showToast({title: "分享错误，请重新分享",icon: 'none'});
				}
			},
			displayMore(orderId){ //展开更多
				this.dailyList.some((i,j)=>{
					if(i.BILL_ID == orderId){
						i.isShow = !i.isShow;
						this.$set(this.dailyList,j,i);
						return true;
					}
				})
			},
			someInit(obj){//初始化条件与数据
				let data = uni.getStorageSync('userInfo');
				if(data){
					//复制筛选条件
					//data={type: 3,params:{QUERY_ID: 2,MODE: 0,BILL_ID: "1757034"}}
					let mode = obj.type == 3?1:0;//3分享对应mode1  4对应mode0
					this.params = {
						QUERY_ID: 2,
						MODE: mode,
						BILL_ID: obj.params.BILL_ID
					}
					data = JSON.parse(data);
					if(data.userName==''||data.userPassword==''){
						uni.navigateTo({
							url: '../../pages/index/login'
						})
					}else{
						let token = uni.getStorageSync('token') || ''
						let obj = {
							userName: data.userName,
							userPassword: data.userPassword,
							dbname: data.dbname || '',
							url: data.url,
							personName: data.personName,
							personId: data.personId,
							port: data.port || 7798
						}
						this.$store.commit('changeLoginParams',obj);
						this.$store.commit('changeLoginToken',token);
					}
				}else{
					uni.navigateTo({
						url: '../../pages/index/login'
					})
				}
			},
			wrquest(params = this.params){//接口调用
				uni.showLoading({title: '加载中...'})
				return new Promise((resolv,reject)=>{
					uni.request({
						//url: this.url + '/public/query',
						url: this.transitUrl + '/transit_server',
						//method: 'GET',
						method: 'POST',
						data:{
							interface_add: 'http://' + this.url + ':' + this.port +'/public/query',
							token: this.token,
							//params: params,
							params: JSON.stringify(params),
						},
						success:res=>{
							if(res.data.status == 0){
								resolv(res.data.data)
							}else{
								reject(uni.showToast({title: '异常' + res.message,icon: 'none'}))
							}
						},
						fail:(res)=> {
							uni.showToast({title: '网络异常',icon: 'none'})
						},
						complete:(res)=> {
							uni.hideLoading()
						}
					})
				})
			},
			async queryData(params = this.params){ //查询数据
				let data = await this.wrquest(params);
				this.dailyList = this.createDoubleArr(data);
				this.appendCheckBox();
			},
			contactDoubleArr(arr){//已有分组的情况下 下拉刷新出来的新数据处理
				let arr1 = this.createDoubleArr(arr); //新增的二维数组
				let num1 = 0,num2 = 0,num3 = 0;
				arr1.forEach(i=>{
					num1+= i.child.length
				})
				let arr2 = this.dailyList;//原来的二维数组
				arr2.forEach(i=>{
					num2+= i.child.length
				})
				arr1.forEach((i,j)=>{
					let flag = arr2.some((k,l)=>{
						if(i.BILL_ID == k.BILL_ID){//新增数据在原有数组中存在
							k.child = k.child.concat(i.child);
							return true;
						}
					})
					if(!flag){
						arr2.push(i);
					}
				})
				arr2.forEach(i=>{
					num3+= i.child.length
				})
				return arr2;
			},
			createDoubleArr(arr){
				let arr1 = []
				arr.filter(i=>{
					let obj = {};
					obj['BILL_CODE'] = i.BILL_CODE;
					obj['BILL_DATE_STR'] = i.BILL_DATE_STR;
					obj['BILL_ID'] = i.BILL_ID;
					obj['BILL_LEFTMONEY'] = i.BILL_LEFTMONEY;
					obj['BILL_PAIDMONEY'] =Math.abs(Number(i.BILL_TOTALMONEY)) - Math.abs(Number(i.BILL_LEFTMONEY));
					obj['child'] = [];
					arr1.push(obj);
				})
				arr1 = arr1.filter((i,j,self)=>{
					return self.findIndex(el=>el.BILL_CODE == i.BILL_CODE)===j
				})
				arr1.forEach((i,j)=>{
					arr.forEach((k,l)=>{
						let flag = false;
						let obj = {};
						if(i.BILL_ID == k.BILL_ID){
							flag = true;
							obj['BILLDETAIL_GOODSNAME'] = k.BILLDETAIL_GOODSNAME;
							obj['BILL_LEFTMONEY'] = k.BILL_LEFTMONEY;
							obj['BILLDETAIL_W'] = k.BILLDETAIL_W;
							obj['BILLDETAIL_PRICE'] = k.BILLDETAIL_PRICE;
							obj['BILLDETAIL_H'] = k.BILLDETAIL_H;
							obj['BILLDETAIL_TOTALQTY'] = k.BILLDETAIL_QTY;
							obj['BILLDETAIL_TOTALMONEY'] = k.BILLDETAIL_TOTALMONEY;
							obj['img'] = this.wpublic.getImgUrl(k.BILLDETAIL_ID);
						}
						if(flag)i.child.push(obj)
					})
				})
				return arr1;
			},
			appendCheckBox(){ //添加可控筛选属性
				if(this.dailyList.length == 0){
					this.tipShow = true;
					return
				}
				this.tipShow = false;
				this.dailyList.forEach((i,j)=>{
					this.$set(this.dailyList[j],'isTrue',true);
					this.$set(this.dailyList[j],'isShow',true);
					if(i.child.length>0){
						i.child.forEach((k,j)=>{
							i.img = this.wpublic.getImgUrl(i.BILLDETAIL_ID);
						})
					}
				})
			},
			canle(){ //取消付款
				uni.showModal({
					title: "提示",
					content: "是否放弃付款,狠心离开",
					success:res=> {
						if(res.confirm){
							uni.switchTab({
								url: "../../pages/index/index"
							})
						}
					}
				})
			},
			// 付款逻辑开始
			package(){//组装数据
				let data = [];
				this.dailyList.forEach(i=>{
					if(i.isTrue){
						i.child.some((k,j)=>{
							let obj = {};
							obj.id = 0;
							obj.LpTotal = k.BILL_LEFTMONEY; //后期工艺价格
							obj.total = k.BILL_LEFTMONEY;
							obj.refbillid = i.BILL_ID;
							data.push(obj);
							if(true)return true
						})
					}
				}) 
				let params = {
					MODE: 1,
					order:{
						id: 0,
						type: 2,
						Date:this.wpublic.getDay(0),
						partnerid:this.partnerid,//客户ID 1757112 ,//
						paymenttypeid: 258,//支付方式
						paymoney: this.sales,
						total: this.sales,
						remark: '微信小程序临时收款'
					},
					'OrderDetail': data
				}
				return params;
			},
			payStatus(){
				let flag = false;
				flag = this.dailyList.some(i=>{
					if(i.isTrue)return true;
				})
				return flag
			},
			complete(params){//收成临时收款单
				return new Promise((resolve,reject)=>{
					uni.request({
						url: this.transitUrl + '/transit_server',
						//url: 'http://192.168.199.145:7798' + '/public/common',
						//method: 'GET',
						method: 'POST',
						data:{
							interface_add: 'http://' + this.url + ':' + this.port + '/public/common',
							//token: '6DC6E3E243773B841717190112723222',
							token: this.token,
							params: JSON.stringify(params),
							//params:params,
						},
						success:(res)=> {
							let result = judge.loginJudge(res.data.status);
							if (result == false) {
								return false;
							}
							if(res.data.status == 0){
								resolve(res.data);
							}else{
								reject(uni.showToast({title:'订单修改失败'+res.data.message,icon:'none'}))
							}
						},
						fail:(res)=> {
							reject(uni.showToast({title: '网络繁忙,稍后重试'+res.message,icon:'none'}))
							
						},
					})
				}) 
			},
			async pay(){ //发起支付
				if(!this.payStatus()){
					uni.showToast({title: "请选择单子",icon: 'none'})
					return
				}
				if(this.partnerid!=''){
					let params = this.package();
					let data = await this.complete(params).catch(()=>{return 'wrong'});
					if(data!='wrong'){
						if(data.status == 0){
							this.paymoney = params.order.paymoney;
							this.temporaryData.order_id = data.order_id;//登账订单
							this.temporaryData.order_code = data.order_code_long;//微信订单号
							this.taskPay(this.temporaryData.order_code);
						}else{
							uni.showToast({title: data.message,icon: 'none'})
						}
					}else{
						uni.showToast({title: '异常',icon:'none'})
					}
				}else{
					uni.showToast({title: '客户ID获取异常',icon:'none'})
				}
			},
			beforeWXpay(url,payOrderId){
				uni.showLoading({title: '发起支付中...'});
				let userInfo = JSON.parse(uni.getStorageSync('userInfo'));
				let personName = uni.getStorageSync('personName');
				let token = uni.getStorageSync('token');
				let params = {trade_no: payOrderId || '',customer_id: userInfo.personId,
				customer_name: personName,erp_ip: this.url + ':' + this.port,receipt_id: this.temporaryData.order_id,token: token,total_fee: this.paymoney}
				//锚点
				return new Promise((resolve,reject)=>{
					wx.login({
						success: res => {
							var code = res.code;
							//nonceStr->code MD5 
							uni.request({
								url: url,
								method: 'POST',
								data: {
									Request_url: 'https://proxy.fydlsoft.com/' + "unifiedorder",
									// unifiedorder: '',
									token: l_md5(code+'FYDL'),
									code: code,
									params: JSON.stringify(params)
								},
								success: (res) => {
									resolve(res)
								},
								fail:(erro)=> {
									uni.showToast({title: '请求失败'+'错误码201',icon:"none"});
									reject();
								}
							})
						}
					})
				})
			},
			async taskPay(payOrderId){ //调用微信前运行
				let data = await this.beforeWXpay(this.payUrl,payOrderId).catch(()=>{return {state: 500}});
				if(data.statusCode == 200){ //服务器正常连接
					if(data.data.status == 200){
						this.WXpay(data.data);
					}else{
						this.taskPayWrong(data)
					}
				}else{
					this.taskPayWrong(data)
				}
			},
			taskPayWrong(data){// 调用微信支付前的接口报错
				uni.showToast({title: data.data.RETURN_MSG,icon: 'none'})
			},
			WXpay(data){ //调用微信支付
				uni.requestPayment({
					provider: 'wxpay',
					timeStamp: data.timeStamp,
					nonceStr: data.nonceStr,
					package: data.package,
					signType: data.signType,
					paySign: data.paySign,
					success: (res)=>{
						if (res.errMsg == 'requestPayment:ok'){
							uni.navigateTo({
								url: '../../pages/order/payresult?order_id=' + this.temporaryData.order_code
							})
						}else{
							uni.navigateTo({
								url: '../../pages/order/payresult?order_id=' + this.temporaryData.order_code
							})
						}
					},
					fail: (err)=> {
						uni.showToast({title: '支付已取消',icon: 'none'});
					},
					complete: () => {
						uni.hideLoading()
					}
				})
			},
		},
		async onPullDownRefresh() {
			await this.queryData();
			uni.stopPullDownRefresh()
		},
		created() {
			//this.beforeWXpay1()
			//{"dbname":"演示账套","url":"122.114.123.189","userName":"18382416365","userPassword":"666666","personId":"1757112","port":"7798"}
			//let dd = {type: 3,params:{PartnerId:1757112,PartnerName: '龙行天下广告',BILL_ID: "182907570225975296",dbname: "演示账套",url:"122.114.123.189",port: "7798"}}
			
			let data = uni.getStorageSync('userInfo');
		
				data = JSON.parse(data);
				
				let token = uni.getStorageSync('token') || '';
				let obj = {
						userName: data.userName,
						userPassword: data.userPassword,
						dbname: data.dbname || '',
						url: data.url,
						personName: data.personName,
						personId: data.personId,
						port: data.port || 7798
					}
				this.$store.commit('changeLoginParams',obj);
				this.$store.commit('changeLoginToken',token);
		},
		computed:{
			url:{ //cs地址
				get: function(){
					return this.$store.state.loginParams.url
				},
				set: function(){
					return ''
				}
			},
			port: {
				get: function(){
					return this.$store.state.loginParams.port
				},
				set: function(){
					return 7798
				}
			},
			dbname: {
				get: function(){
					return this.$store.state.loginParams.dbname
				},
				set: function(){
					return ''
				}
			},
			token: {
				get: function(){
					return this.$store.state.token
				},
				set: function(){
					return ''
				}
			},
			num: {
				set:function(){
					return 0
				},
				get:function(){
					let num = 0;
					this.dailyList.forEach(i=>{
						if(i.isTrue)num++
					})
					return num
				}
			},
			partnerid:{
				set:function(){
					return 0
				},
				get:function(){
					return this.$store.state.loginParams.personId
				}
			},
			sales: {
				set: function(){
					return 0
				},
				get: function(){
					let nums = 0;
					this.dailyList.forEach(i=>{
						if(i.isTrue){
							nums += Math.abs(parseFloat(i.BILL_LEFTMONEY));
						}
					})
					return nums;
				}
			},
			optionsData:{
				set: function(){
					return 0
				},
				get: function(){
					return this.$store.state.params;
				}
			},
			transitUrl: {
				set: function(){
					return 0
				},
				get: function(){
					return this.$store.state.transitUrl;
				}
			},
			payUrl: {
				set: function(){
					return 0
				},
				get: function(){
					return this.$store.state.payUrl;
				}
			}
		},
	}
</script>

<style lang="scss" scoped>
	@import "../../common/css/iconfont.css";
	@import "../../common/css/common.scss";
	@import "../../common/css/order.scss";
	.con-conent{
		.recfooter{
			height: 120rpx;
			transform: translateY(0);
			.pricebtn{
				display: flex;
				justify-content: space-between;
				.left1{
					display: flex;
					.pay-cont{
						display: flex;
						flex-direction: column;
					}
				}
				.right1{
					display: flex;
				}
			}
		}
		.tip{
			padding: 0 2.5%;
			background: $white;
			margin-bottom: 20rpx;
			text-indent: 2rem;
			.text-tip{
				color: $gray2;
				font-size: 28rpx;
			}
			.imp{
				color: $black;
				font-size: 32rpx;
				padding-right: 10rpx;
			}
		}
	}
</style>